#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/update-version.js <version>
 * –ü—Ä–∏–º–µ—Ä: node scripts/update-version.js 0.1.1
 */

const fs = require('fs');
const path = require('path');

function updateVersion(newVersion) {
  console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –Ω–∞ ${newVersion}...`);

  // –§–∞–π–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const files = [
    {
      path: 'package.json',
      pattern: /"version":\s*"[^"]*"/,
      replacement: `"version": "${newVersion}"`
    },
    {
      path: 'src-tauri/Cargo.toml',
      pattern: /version\s*=\s*"[^"]*"/,
      replacement: `version = "${newVersion}"`
    },
    {
      path: 'src-tauri/tauri.conf.json',
      pattern: /"version":\s*"[^"]*"/,
      replacement: `"version": "${newVersion}"`
    }
  ];

  let updatedFiles = 0;

  files.forEach(file => {
    const filePath = path.join(process.cwd(), file.path);
    
    if (fs.existsSync(filePath)) {
      try {
        let content = fs.readFileSync(filePath, 'utf8');
        const originalContent = content;
        
        content = content.replace(file.pattern, file.replacement);
        
        if (content !== originalContent) {
          fs.writeFileSync(filePath, content, 'utf8');
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: ${file.path}`);
          updatedFiles++;
        } else {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ñ–∞–π–ª —É–∂–µ –Ω—É–∂–Ω—É—é –≤–µ—Ä—Å–∏—é
          const currentVersionMatch = content.match(file.pattern);
          if (currentVersionMatch) {
            const currentVersion = currentVersionMatch[0].match(/"[^"]*"/)[0].replace(/"/g, '');
            if (currentVersion === newVersion) {
              console.log(`‚úÖ –£–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: ${file.path} (${newVersion})`);
              updatedFiles++;
            } else {
              console.log(`‚ö†Ô∏è  –ù–µ –∏–∑–º–µ–Ω–µ–Ω: ${file.path} (–ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω)`);
            }
          } else {
            console.log(`‚ö†Ô∏è  –ù–µ –∏–∑–º–µ–Ω–µ–Ω: ${file.path} (–ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω)`);
          }
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${file.path}:`, error.message);
      }
    } else {
      console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${file.path}`);
    }
  });

  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedFiles} –∏–∑ ${files.length} —Ñ–∞–π–ª–æ–≤`);
  
  if (updatedFiles === files.length) {
    console.log('üéâ –í—Å–µ –≤–µ—Ä—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!');
  } else {
    console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.');
  }
}

function validateVersion(version) {
  const versionPattern = /^\d+\.\d+\.\d+$/;
  if (!versionPattern.test(version)) {
    console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: X.Y.Z (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.1.0)');
    process.exit(1);
  }
}

function main() {
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    console.log('üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/update-version.js <version>');
    console.log('üìñ –ü—Ä–∏–º–µ—Ä: node scripts/update-version.js 0.1.1');
    process.exit(1);
  }

  const newVersion = args[0];
  validateVersion(newVersion);
  updateVersion(newVersion);
}

if (require.main === module) {
  main();
}

module.exports = { updateVersion, validateVersion };
