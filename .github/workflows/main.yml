name: Build & Release for macOS ARM + x86, Windows x86 + ARM, Linux x86 + ARM
on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: github.event_name != 'push' || !startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - name: Install dependencies
        run: pnpm install
      - name: Type check
        run: npx tsc --noEmit --skipLibCheck
      - name: Build test
        run: pnpm build
  build-macos-arm:
    runs-on: macos-latest
    permissions:
      contents: read
      packages: write
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install Rust target for macOS ARM
        run: rustup target add aarch64-apple-darwin
      - name: Install dependencies
        run: pnpm install
      - name: Build Next.js
        run: pnpm build
      - name: Build Tauri application for macOS ARM
        run: pnpm tauri build --target aarch64-apple-darwin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload macOS ARM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: moonraker-host-scanner-macos-arm
          path: src-tauri/target/aarch64-apple-darwin/release/bundle/
          retention-days: 30
  build-macos-x86:
    runs-on: macos-latest
    permissions:
      contents: read
      packages: write
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install Rust target for macOS x86
        run: rustup target add x86_64-apple-darwin
      - name: Install dependencies
        run: pnpm install
      - name: Build Next.js
        run: pnpm build
      - name: Build Tauri application for macOS x86
        run: pnpm tauri build --target x86_64-apple-darwin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload macOS x86 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: moonraker-host-scanner-macos-x86
          path: src-tauri/target/x86_64-apple-darwin/release/bundle/
          retention-days: 30
  build-windows-x86:
    runs-on: windows-latest
    permissions:
      contents: read
      packages: write
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install Rust target for Windows x86
        run: rustup target add x86_64-pc-windows-msvc
      - name: Install dependencies
        run: pnpm install
      - name: Build Next.js
        run: pnpm build
      - name: Build Tauri application for Windows x86
        run: pnpm tauri build --target x86_64-pc-windows-msvc
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Windows x86 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: moonraker-host-scanner-windows-x86
          path: src-tauri/target/x86_64-pc-windows-msvc/release/bundle/
          retention-days: 30
  build-windows-arm:
    runs-on: windows-latest
    permissions:
      contents: read
      packages: write
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install Rust target for Windows ARM
        run: rustup target add aarch64-pc-windows-msvc
      - name: Install dependencies
        run: pnpm install
      - name: Build Next.js
        run: pnpm build
      - name: Build Tauri application for Windows ARM
        run: pnpm tauri build --target aarch64-pc-windows-msvc
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Windows ARM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: moonraker-host-scanner-windows-arm
          path: src-tauri/target/aarch64-pc-windows-msvc/release/bundle/
          retention-days: 30
  build-linux-x86:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install Rust target for Linux x86
        run: rustup target add x86_64-unknown-linux-gnu
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev build-essential curl wget libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
          pnpm install
      - name: Build Next.js
        run: pnpm build
      - name: Build Tauri application for Linux x86
        run: pnpm tauri build --target x86_64-unknown-linux-gnu
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Linux x86 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: moonraker-host-scanner-linux-x86
          path: src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/
          retention-days: 30
  build-linux-arm:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install Rust target for Linux ARM
        run: rustup target add aarch64-unknown-linux-gnu
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev build-essential curl wget libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          pnpm install
      - name: Build Tauri application for Linux ARM
        run: pnpm tauri build --target aarch64-unknown-linux-gnu
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Linux ARM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: moonraker-host-scanner-linux-arm
          path: src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/
          retention-days: 30
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: [build-macos-arm, build-macos-x86, build-windows-x86, build-windows-arm, build-linux-x86, build-linux-arm]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download macOS ARM artifacts
        uses: actions/download-artifact@v4
        with:
          name: moonraker-host-scanner-macos-arm
          path: ./artifacts/macos-arm
      - name: Download macOS x86 artifacts
        uses: actions/download-artifact@v4
        with:
          name: moonraker-host-scanner-macos-x86
          path: ./artifacts/macos-x86
      - name: Download Windows x86 artifacts
        uses: actions/download-artifact@v4
        with:
          name: moonraker-host-scanner-windows-x86
          path: ./artifacts/windows-x86
      - name: Download Windows ARM artifacts
        uses: actions/download-artifact@v4
        with:
          name: moonraker-host-scanner-windows-arm
          path: ./artifacts/windows-arm
      - name: Download Linux x86 artifacts
        uses: actions/download-artifact@v4
        with:
          name: moonraker-host-scanner-linux-x86
          path: ./artifacts/linux-x86
      - name: Download Linux ARM artifacts
        uses: actions/download-artifact@v4
        with:
          name: moonraker-host-scanner-linux-arm
          path: ./artifacts/linux-arm
      - name: Debug artifacts structure
        run: |
          echo "Artifacts structure:"
          find ./artifacts -type f || true
      - name: Collect artifacts
        id: collect_artifacts
        run: |
          files=$(find ./artifacts -type f \( -name "*.dmg" -o -name "*.exe" -o -name "*.deb" -o -name "*.AppImage" \) | tr '\n' ',' | sed 's/,$//')
          if [ -z "$files" ]; then
            echo "❌ No .dmg, .exe, .deb, or .AppImage files found!"
            exit 1
          fi
          echo "FILES=$files" >> $GITHUB_ENV
          echo "Found artifacts:"
          echo "$files" | tr ',' '\n'
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }} (macOS ARM + x86, Windows x86 + ARM, Linux x86 + ARM)
          draft: false
          prerelease: false
          body: |
            ## Moonraker Host Scanner v${{ github.ref_name }}

            ### 🍎 macOS Builds
            - ARM64 (`.dmg` for Apple Silicon)
            - x86_64 (`.dmg` for Intel Macs)

            ### 🪟 Windows Builds
            - x86_64 (`.exe` for Intel/AMD PCs)
            - ARM64 (`.exe` for ARM-based Windows devices)

            ### 🐧 Linux Builds
            - x86_64 (`.deb` and `.AppImage` for Intel/AMD PCs)
            - ARM64 (`.deb` and `.AppImage` for ARM-based devices)

            ### 📦 Installation
            #### macOS
            1. Download the `.dmg` file
            2. Open the DMG and drag the app to Applications
            3. Launch Moonraker Host Scanner (ignore quarantine warning or remove it manually)
            #### Windows
            1. Download the `.exe` file
            2. Run the installer and follow the instructions
            3. Launch Moonraker Host Scanner
            #### Linux
            1. For `.deb`: Download the `.deb` file and install with `sudo dpkg -i <file>.deb` (Ubuntu/Debian)
            2. For `.AppImage`: Download the `.AppImage` file, make it executable with `chmod +x <file>.AppImage`, and run it
            3. Launch Moonraker Host Scanner

            ### 🔧 Features
            - Network scanning for Moonraker printers
            - Real-time printer status monitoring
            - Printer control (start, pause, stop, emergency stop)
            - Webcam streaming support
            - SSH connection support
            - System notifications
            - Multi-language support (English, Russian, German)
            - Dark/Light theme support

            ### 🐛 Bug Reports
            If you encounter any issues, please report them on GitHub.
          files: ${{ env.FILES }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}