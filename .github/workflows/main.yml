name: Build, Test & Release

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: github.event_name != 'push' || !startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install

      - name: Type check
        run: npx tsc --noEmit --skipLibCheck

      - name: Lint
        run: pnpm lint

      - name: Build test
        run: pnpm build

  build:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      packages: write
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: macos-intel
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: macos-arm
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install Rust targets
        run: rustup target add ${{ matrix.target }}

      - name: Install additional Rust targets (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          rustup target add x86_64-pc-windows-msvc
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

      - name: Install system dependencies (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
          sudo apt-get install -y libwebkit2gtk-4.1-dev || sudo apt-get install -y libwebkit2gtk-4.0-dev || echo "WebKit not available"

      - name: Install dependencies
        run: pnpm install

      - name: Build Next.js
        run: pnpm build

      - name: Build Tauri application
        run: pnpm tauri build --target ${{ matrix.target }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: moonraker-host-scanner-${{ matrix.platform }}
          path: src-tauri/target/${{ matrix.target }}/release/bundle/
          retention-days: 30

  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: false   # скачает в папки по имени артефактов

      - name: Debug list all files
        run: find . -type f

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            moonraker-host-scanner-windows/**/*.exe
            moonraker-host-scanner-windows/**/*.msi
            moonraker-host-scanner-macos-intel/**/*.dmg
            moonraker-host-scanner-macos-arm/**/*.dmg
            moonraker-host-scanner-linux/**/*.AppImage
            moonraker-host-scanner-linux/**/*.deb
            moonraker-host-scanner-*/**/*.zip
            moonraker-host-scanner-*/**/*.tar.gz
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
