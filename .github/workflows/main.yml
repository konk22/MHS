name: Build, Test & Release

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: github.event_name != 'push' || !startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install

      - name: Type check
        run: npx tsc --noEmit --skipLibCheck

      - name: Lint
        run: pnpm lint

      - name: Build test
        run: pnpm build

  build:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      packages: write
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: macos-intel
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: macos-arm
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install Rust targets
        run: rustup target add ${{ matrix.target }}

      - name: Install additional Rust targets (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          rustup target add x86_64-pc-windows-msvc
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

      - name: Install system dependencies (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
          sudo apt-get install -y libwebkit2gtk-4.1-dev || sudo apt-get install -y libwebkit2gtk-4.0-dev || echo "WebKit not available"

      - name: Install dependencies
        run: pnpm install

      - name: Build Next.js
        run: pnpm build

      - name: Build Tauri application
        run: pnpm tauri build --target ${{ matrix.target }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List build artifacts
        shell: bash
        run: |
          echo "Build artifacts for ${{ matrix.platform }}:"
          if [ -d "src-tauri/target/${{ matrix.target }}/release/bundle/" ]; then
            echo "Bundle directory contents:"
            ls -la src-tauri/target/${{ matrix.target }}/release/bundle/
            echo "All files in bundle:"
            find src-tauri/target/${{ matrix.target }}/release/bundle/ -type f
          else
            echo "No bundle directory found"
          fi
          echo "Target directory contents:"
          if [ -d "src-tauri/target/${{ matrix.target }}/release/" ]; then
            ls -la src-tauri/target/${{ matrix.target }}/release/
          else
            echo "No release directory found"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: moonraker-host-scanner-${{ matrix.platform }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/*.exe
            src-tauri/target/${{ matrix.target }}/release/bundle/*.msi
            src-tauri/target/${{ matrix.target }}/release/bundle/*.dmg
            src-tauri/target/${{ matrix.target }}/release/bundle/*.AppImage
            src-tauri/target/${{ matrix.target }}/release/bundle/*.deb
            src-tauri/target/${{ matrix.target }}/release/bundle/*.app
          retention-days: 30

  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: build

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: List downloaded files
        shell: bash
        run: |
          echo "Current directory: $(pwd)"
          echo "Downloaded artifacts:"
          find . -type f \( -name "*.exe" -o -name "*.msi" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" \) | head -20
          echo "All files in current directory:"
          ls -la
          echo "Files in subdirectories:"
          find . -type f | head -20

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            moonraker-host-scanner-windows/*.exe
            moonraker-host-scanner-windows/*.msi
            moonraker-host-scanner-macos-intel/*.dmg
            moonraker-host-scanner-macos-intel/*.app
            moonraker-host-scanner-macos-arm/*.dmg
            moonraker-host-scanner-macos-arm/*.app
            moonraker-host-scanner-linux/*.AppImage
            moonraker-host-scanner-linux/*.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
